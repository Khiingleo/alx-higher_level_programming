# TEST CASES FOR THE matrix_mul(m_a, m_b) FUNCTION

FIRST:
Import the module
>>> matrix_mul = __import__('100-matrix_mul').matrix_mul

TEST CASES
1. Test with valid matrices:
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = m_a
	>>> print(matrix_mul(m_a, m_b))
	[[7, 10], [15, 22]]

	>>> m_a = [[1, 2]]
	>>> m_b = [[3, 4], [5, 6]]
	>>> print(matrix_mul(m_a, m_b))
	[[13, 16]]

2. Test with floats:
	>>> m_a = [[1.2, 5.5, 6.2], [4.66, 12.3, -9.2]]
	>>> m_b = [[5.0, 3.3], [-2.9, 4.4], [7.2, 4.4]]
	>>> print(matrix_mul(m_a, m_b))
	[[34.69, 55.44000000000001], [-78.61, 29.018000000000008]]


3. Test with too few arguments:
	>>> print(matrix_mul())
	Traceback (most recent call last):
	...
	TypeError: matrix_mul() missing 2 required positional arguments: 'm_a' and 'm_b'

4. Test for if it cannot be multiplied:
	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2], [3, 4], [5, 6]]
	>>> print(matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	...
	ValueError: m_a and m_b can't be multiplied

5. Test with empty matrix:
	>>> print(matrix_mul([], [[1, 2]]))
	Traceback (most recent call last):
	...
	ValueError: m_a can't be empty

	>>> print(matrix_mul([[1, 2]], [[]]))
	Traceback (most recent call last):
	...
	ValueError: m_b can't be empty

	>>> print(matrix_mul([[]], []))
	Traceback (most recent call last):
	...
	ValueError: m_a can't be empty

6. Test with wrong types:
	>>> print(matrix_mul("hello", [[1, 2]]))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

	>>> print(matrix_mul([[1, 2]], "there"))
	Traceback (most recent call last):
	...
	TypeError: m_b must be a list

	>>> print(matrix_mul("hello", "there"))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list

	>>> print(matrix_mul([1, 2], [[3, 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list of lists

	>>> print(matrix_mul([[1, 2]], [3, 4]))
	Traceback (most recent call last):
	...
	TypeError: m_b must be a list of lists

	>>> print(matrix_mul([1, 2], [3, 4]))
	Traceback (most recent call last):
	...
	TypeError: m_a must be a list of lists

7. Test with wrong elem in list of lists:
	>>> print(matrix_mul([[1, "hi"]], [[3, 4]]))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats

	>>> print(matrix_mul([[1, 2]], [["there", 7]]))
	Traceback (most recent call last):
	...
	TypeError: m_b should contain only integers or floats

	>>> print(matrix_mul([[1, "hi"]], [["there", 7]]))
	Traceback (most recent call last):
	...
	TypeError: m_a should contain only integers or floats

8. Test with unequal size of rows:
	>>> m_a = [[1, 2], [3, 4, 5]]
	>>> m_b = [[1, 2], [3, 4]]
	>>> print(matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	...
	TypeError: each row of m_a must be of the same size

	>>> m_a = [[1, 2], [3, 4]]
	>>> m_b = [[1, 2], [3, 4, 5]]
	>>> print(matrix_mul(m_a, m_b))
	Traceback (most recent call last):
	...
	TypeError: each row of m_b must be of the same size
